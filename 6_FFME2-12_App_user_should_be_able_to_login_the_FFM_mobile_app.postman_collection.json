{
	"info": {
		"_postman_id": "29e0458c-7f21-40dd-8c42-2ef2604ebe56",
		"name": "6_FFME2-12_App_user_should_be_able_to_login_the_FFM_mobile_app",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PositiveTest",
			"item": [
				{
					"name": "FFME2-12 App user should be able to login the FFM mobile app",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31ef949c-f66c-427e-a22f-e7eb50979088",
								"exec": [
									"var jsonData= JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user login auth_token\", jsonData.auth_token);",
									"",
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//generating Schema",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"auth_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MDE0NzE0NjIsImlhdCI6MTYwMDg2NjY2Miwic3ViIjoxNzQsIm1vZHVsZXMiOltdLCJ1c2VyX3R5cGUiOiJHZW5lcmFsIiwibmFtZSI6Ik5pYXogU2FyaWYiLCJwaG9uZV9udW1iZXIiOiIyMDE1ODkxNDExIiwibWVtYmVyX3R5cGUiOjN9.jnegcWb8RNXdhQ3YhTLdF5F0SQytStTbCEDcr0xOSJI\",",
									"            \"message\": \"Successfully logged in.\",",
									"            \"status\": \"success\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"auth_token\",",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"auth_token\": {",
									"            \"$id\": \"#/properties/auth_token\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The auth_token schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MDE0NzE0NjIsImlhdCI6MTYwMDg2NjY2Miwic3ViIjoxNzQsIm1vZHVsZXMiOltdLCJ1c2VyX3R5cGUiOiJHZW5lcmFsIiwibmFtZSI6Ik5pYXogU2FyaWYiLCJwaG9uZV9udW1iZXIiOiIyMDE1ODkxNDExIiwibWVtYmVyX3R5cGUiOjN9.jnegcWb8RNXdhQ3YhTLdF5F0SQytStTbCEDcr0xOSJI\"",
									"            ]",
									"        },",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"Successfully logged in.\"",
									"            ]",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"success\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"",
									"//Scema Validation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"US\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Company admin should be able to register app user from admin panel so that they can login.\n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"US\"\n\n}\n\nExpected Result:\n{\n    \"auth_token\": \"jwt token will be generated\",\n    \"message\": \"Successfully logged in.\",\n    \"status\": \"success\"\n}\n\nActual Result:\n{\n    \"auth_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MDEyMjY5MzAsImlhdCI6MTYwMDYyMjEzMCwic3ViIjoxNzQsIm1vZHVsZXMiOltdLCJ1c2VyX3R5cGUiOiJHZW5lcmFsIiwibmFtZSI6Ik5pYXogU2FyaWYiLCJwaG9uZV9udW1iZXIiOiIyMDE1ODkxNDExIiwibWVtYmVyX3R5cGUiOjN9.Hpp2q9Kc2lK3gLo6Hso40_f3TuOZUSL-7ObaJGi7xPE\",\n    \"message\": \"Successfully logged in.\",\n    \"status\": \"success\"\n}\nStatus Code: 200 OK\nTest Result: Pass\n"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "NegativeTest",
			"item": [
				{
					"name": "FFME2-12-1 User unable to login without any required field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2e97909-cd1b-4bef-bfcc-cfcf18a618e1",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"firebase_id must be non-empty\",",
									"                \"phone_number must be non-empty\",",
									"                \"phone_number_int must be non-empty\",",
									"                \"country_code must be non-empty\",",
									"                \"secret_text must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"firebase_id must be non-empty\",",
									"                    \"phone_number must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"firebase_id must be non-empty\",",
									"                            \"phone_number must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"\",\n\n\"firebase_id\": \"\",\n\n\"secret_text\": \"\",\n\n\"phone_number_int\": \"\",\n\n\"iso_code\": \"\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Test is to identify invalid result by leaving all required filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"\",\n\n\"firebase_id\": \"\",\n\n\"secret_text\": \"\",\n\n\"phone_number_int\": \"\",\n\n\"iso_code\": \"\"\n\n}\n\n\nExpected Result:\n{\n    \"message\": [\n        \"firebase_id must be non-empty\",\n        \"phone_number must be non-empty\",\n        \"phone_number_int must be non-empty\",\n        \"country_code must be non-empty\",\n        \"secret_text must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"firebase_id must be non-empty\",\n        \"phone_number must be non-empty\",\n        \"phone_number_int must be non-empty\",\n        \"country_code must be non-empty\",\n        \"secret_text must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-12-2 User unable to login without phone_number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d97366dd-7834-415a-8089-4deba4d4ed85",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"phone_number must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"phone_number must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"phone_number must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"US\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Test is to identify invalid result by leaving phone_number filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"US\"\n\n}\n\nExpected Result:\n{\n    \"message\": [\n        \"phone_number must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"phone_number must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-12-3 User unable to login without phone_number and firebase_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8d7c660-4bbb-4d9d-8261-dc790f83f01f",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"firebase_id must be non-empty\",",
									"                \"phone_number must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"firebase_id must be non-empty\",",
									"                    \"phone_number must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"firebase_id must be non-empty\",",
									"                            \"phone_number must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"\",\n\n\"firebase_id\": \"\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"US\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Test is to identify invalid result by leaving phone_number and firebase_id filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"\",\n\n\"firebase_id\": \"\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"US\"\n\n}\n\nExpected Result:\n{\n    \"message\": [\n        \"firebase_id must be non-empty\",\n        \"phone_number must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"firebase_id must be non-empty\",\n        \"phone_number must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-12-4 User unable to login without phone_number and secret_text",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fc594c5-65ac-4403-883a-a93752523657",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"phone_number must be non-empty\",",
									"                \"secret_text must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"phone_number must be non-empty\",",
									"                    \"secret_text must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"phone_number must be non-empty\",",
									"                            \"secret_text must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"US\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Test is to identify invalid result by leaving phone_number and secret_text filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"US\"\n\n}\n\nExpected Result:\n{\n    \"message\": [\n        \"phone_number must be non-empty\",\n        \"secret_text must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result: \n{\n    \"message\": [\n        \"phone_number must be non-empty\",\n        \"secret_text must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-12-5 User unable to login without phone_number and phone_number_int",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d098fa7c-0ff1-4aad-b48c-ce443b5a3df1",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"phone_number must be non-empty\",",
									"                \"phone_number_int must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"phone_number must be non-empty\",",
									"                    \"phone_number_int must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"phone_number must be non-empty\",",
									"                            \"phone_number_int must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"\",\n\n\"iso_code\": \"US\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Test is to identify invalid result by leaving phone_number and phone_number_int filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"\",\n\n\"iso_code\": \"US\"\n\n}\n\nExpected Result:\n{\n    \"message\": [\n        \"phone_number must be non-empty\",\n        \"phone_number_int must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"phone_number must be non-empty\",\n        \"phone_number_int must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-12-6 User unable to login without phone_number and iso_code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d157206-5835-427a-a1a3-96b20644d077",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"phone_number must be non-empty\",",
									"                \"country_code must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"phone_number must be non-empty\",",
									"                    \"country_code must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"phone_number must be non-empty\",",
									"                            \"country_code must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Test is to identify invalid result by leaving phone_number and iso_code filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"\"\n\n}\n\nExpected Result:\n{\n    \"message\": [\n        \"phone_number must be non-empty\",\n        \"country_code must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"phone_number must be non-empty\",\n        \"country_code must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-12-7 User unable to login without firebase_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14631028-1e42-453d-b821-a78ada418ee7",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"firebase_id must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"firebase_id must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"firebase_id must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"US\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Test is to identify invalid result by leaving firebase_id filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"US\"\n\n}\n\nExpected Result:\n{\n    \"message\": [\n        \"firebase_id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"firebase_id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-12-8 User unable to login without firebase_id and secret_text",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "925acd6f-8c6f-4aeb-8d85-a07bc4a65bb1",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"firebase_id must be non-empty\",",
									"                \"secret_text must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"firebase_id must be non-empty\",",
									"                    \"secret_text must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"firebase_id must be non-empty\",",
									"                            \"secret_text must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"\",\n\n\"secret_text\": \"\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"US\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Test is to identify invalid result by leaving firebase_id and secret_text filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"\",\n\n\"secret_text\": \"\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"US\"\n\n}\n\nExpected Result:\n{\n    \"message\": [\n        \"firebase_id must be non-empty\",\n        \"secret_text must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"firebase_id must be non-empty\",\n        \"secret_text must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-12-9 User unable to login without firebase_id and phone_number_int",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "889b7706-bc23-41c2-a9cb-f34e54dab3b8",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"firebase_id must be non-empty\",",
									"                \"phone_number_int must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"firebase_id must be non-empty\",",
									"                    \"phone_number_int must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"firebase_id must be non-empty\",",
									"                            \"phone_number_int must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"\",\n\n\"iso_code\": \"US\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Test is to identify invalid result by leaving firebase_id and phone_number_int filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"\",\n\n\"iso_code\": \"US\"\n\n}\n\nExpected Result:\n{\n    \"message\": [\n        \"firebase_id must be non-empty\",\n        \"phone_number_int must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"firebase_id must be non-empty\",\n        \"phone_number_int must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-12-10 User unable to login without firebase_id and iso_code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3346951-7e44-48db-af87-298c525697b4",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"firebase_id must be non-empty\",",
									"                \"country_code must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"firebase_id must be non-empty\",",
									"                    \"country_code must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"firebase_id must be non-empty\",",
									"                            \"country_code must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Test is to identify invalid result by leaving firebase_id and iso_code filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"\"\n\n}\n\nExpected Result:\n{\n    \"message\": [\n        \"firebase_id must be non-empty\",\n        \"country_code must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"firebase_id must be non-empty\",\n        \"country_code must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-12-11 User unable to login without secret_text",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a41daa20-6788-4047-ba01-210a32bbe99d",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"secret_text must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"secret_text must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"secret_text must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"US\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Test is to identify invalid result by leaving secret_text filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"US\"\n\n}\n\nExpected Result:\n{\n    \"message\": [\n        \"secret_text must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"secret_text must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-12-12 User unable to login without secret_text and phone_number_int",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "160dd706-d901-469a-9238-3a3b607680ac",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"phone_number_int must be non-empty\",",
									"                \"secret_text must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"phone_number_int must be non-empty\",",
									"                    \"secret_text must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"phone_number_int must be non-empty\",",
									"                            \"secret_text must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"\",\n\n\"phone_number_int\": \"\",\n\n\"iso_code\": \"US\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Test is to identify invalid result by leaving secret_text and phone_number_int filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"\",\n\n\"phone_number_int\": \"\",\n\n\"iso_code\": \"US\"\n\n}\n\nExpected Result:\n{\n    \"message\": [\n        \"phone_number_int must be non-empty\",\n        \"secret_text must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"phone_number_int must be non-empty\",\n        \"secret_text must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-12-13 User unable to login without secret_text and iso_code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0db57ad-3b97-445a-b882-25bd5b2d195d",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"country_code must be non-empty\",",
									"                \"secret_text must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"country_code must be non-empty\",",
									"                    \"secret_text must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"country_code must be non-empty\",",
									"                            \"secret_text must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Test is to identify invalid result by leaving secret_text and iso_code filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"\"\n\n}\n\nExpected Result:\n{\n    \"message\": [\n        \"country_code must be non-empty\",\n        \"secret_text must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"country_code must be non-empty\",\n        \"secret_text must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-12-14 User unable to login without phone_number_int",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5670d810-871b-4046-b73e-e044a36e76af",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"phone_number_int must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"phone_number_int must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"phone_number_int must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"\",\n\n\"iso_code\": \"US\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Test is to identify invalid result by leaving phone_number_int filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"\",\n\n\"iso_code\": \"US\"\n\n}\n\nExpected Result:\n{\n    \"message\": [\n        \"phone_number_int must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"phone_number_int must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-12-15 User unable to login without phone_number_int and iso_code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a345448b-d6ba-4ec1-893f-85dcf7bf250e",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"phone_number_int must be non-empty\",",
									"                \"country_code must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"phone_number_int must be non-empty\",",
									"                    \"country_code must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"phone_number_int must be non-empty\",",
									"                            \"country_code must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"\",\n\n\"iso_code\": \"\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Test is to identify invalid result by leaving phone_number_int and iso_code filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"\",\n\n\"iso_code\": \"\"\n\n}\n\nExpected Result:\n{\n    \"message\": [\n        \"phone_number_int must be non-empty\",\n        \"country_code must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"phone_number_int must be non-empty\",\n        \"country_code must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-12-16 User unable to login without iso_code ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "534748e2-dd80-45a5-85c2-b6ad465c8768",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"country_code must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"country_code must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"country_code must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/user-login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"user-login"
							]
						},
						"description": "Objective: Test is to identify invalid result by leaving iso_code filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"\"\n\n}\n\nExpected Result:\n{\n    \"message\": [\n        \"country_code must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"country_code must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				}
			],
			"description": "Objective: This test folder contains negative testing scenarios to identify invalid result by leaving required filed empty. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n\n{\n\n\"phone_number\": \"2015891411\",\n\n\"firebase_id\": \"firebase_ididid\",\n\n\"secret_text\": \"the_super_secret_text\",\n\n\"phone_number_int\": \"+2015891411\",\n\n\"iso_code\": \"US\"\n\n}\n\nExpected Result: If any related filed missing, it will throw error message.\n\nActual Result: User will see specific error that related to the field.\n\n\n\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "164a50d7-500f-4db0-8fde-648c15e0fa0a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d3397a13-8c7a-4f4d-bb6d-c2852756a7d9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4305a97c-6592-496a-990a-62c6533b5108",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "90d3c1fa-5f6a-4acd-af2d-b24a7fba7f40",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}