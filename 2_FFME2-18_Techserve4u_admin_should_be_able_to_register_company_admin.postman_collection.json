{
	"info": {
		"_postman_id": "4fca2d65-35ba-486e-9ffc-a1055e2137ca",
		"name": "2_FFME2-18_Techserve4u_admin_should_be_able_to_register_company_admin ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PositiveTest",
			"item": [
				{
					"name": "FFME2-18 Techserve4u admin should be able to register company admin ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17101ad4-bf14-4175-8ec8-d8de0bf8718e",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//generating Schema",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": \"Successfully registered dashboard user Abid0358.\",",
									"            \"status\": \"success\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"Successfully registered dashboard user Abid0358.\"",
									"            ]",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"success\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Scema Validation Test",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": 194, \n  \"member_type\": 2\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Techserve4u admin should be able to register company admin so that they can add users. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": 194, \n  \"member_type\": 2\n\n  }\n\nExpected Result:\n\n{\n    \"message\": \"Successfully registered dashboard user Abid0358.\",\n    \"status\": \"success\"\n}\n\nActual Result:\n\n{\n    \"message\": \"Successfully registered dashboard user Abid0358.\",\n    \"status\": \"success\"\n}\n\n\nStatus Code: 201 CREATED\nTest Result: Pass\n\n\n"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "NegativeTest",
			"item": [
				{
					"name": "FFME2-18-1 Createing admin leaving all required filed empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7895847-e5c6-4e9f-8ce6-422ef3e84854",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"email must be non-empty\",",
									"                \"password must be non-empty\",",
									"                \"username must be non-empty\",",
									"                \"firstname must be non-empty\",",
									"                \"lastname must be non-empty\",",
									"                \"company id must be non-empty\",",
									"                \"member_type must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"email must be non-empty\",",
									"                    \"password must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"email must be non-empty\",",
									"                            \"password must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"    ",
									"   ",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"\", \n  \"password\": \"\", \n  \"username\": \"\", \n  \"firstname\": \"\", \n  \"lastname\": \"\", \n  \"company_id\": \"\", \n  \"member_type\": \"\"\n  \n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" email, password, username, firstname, lastname, company_type and member_type information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n\n  \"email\": \"\", \n  \"password\": \"\", \n  \"username\": \"\", \n  \"firstname\": \"\", \n  \"lastname\": \"\", \n  \"company_id\": \"\", \n  \"member_type\": \"\"\n  \n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"email must be non-empty\",\n        \"password must be non-empty\",\n        \"username must be non-empty\",\n        \"firstname must be non-empty\",\n        \"lastname must be non-empty\",\n        \"company id must be non-empty\",\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"email must be non-empty\",\n        \"password must be non-empty\",\n        \"username must be non-empty\",\n        \"firstname must be non-empty\",\n        \"lastname must be non-empty\",\n        \"company id must be non-empty\",\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-2 Creating admin leaving email field empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "086d1acf-f155-4ce2-ab94-4812bbe2de40",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"email must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"email must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"email must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"   ",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": 194, \n  \"member_type\": 2\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" email information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n\n  \"email\": \"\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": 194, \n  \"member_type\": 2\n\n  }\n\n\nExpected Result:\n{\n    \"message\": [\n        \"email must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"email must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-3 Creating admin leaving email and password field empty ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "334b8108-2b64-465d-9ec3-43f93a25667f",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"email must be non-empty\",",
									"                \"password must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"email must be non-empty\",",
									"                    \"password must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"email must be non-empty\",",
									"                            \"password must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"   ",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"\", \n  \"password\": \"\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": 194, \n  \"member_type\": 2\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" email and password information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n\n  \"email\": \"\", \n  \"password\": \"\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": 194, \n  \"member_type\": 2\n\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"email must be non-empty\",\n        \"password must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"email must be non-empty\",\n        \"password must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-4 Creating admin leaving email and username field empty ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a393417f-8558-4d7e-97f5-1a38e550248a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8d40d5d2-1695-495d-965e-ca6a1607d3d7",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"email must be non-empty\",",
									"                \"username must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"email must be non-empty\",",
									"                    \"username must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"email must be non-empty\",",
									"                            \"username must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"   ",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"\", \n  \"password\": \"Michigan\", \n  \"username\": \"\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": 194, \n  \"member_type\": 2\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" email and password information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n\n  \"email\": \"\", \n  \"password\": \"Michigan\", \n  \"username\": \"\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": 194, \n  \"member_type\": 2\n\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"email must be non-empty\",\n        \"username must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"email must be non-empty\",\n        \"username must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-5 Creating admin leaving email and firstname field empty ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72ac9136-225b-46ef-950c-7c5affda9b89",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"email must be non-empty\",",
									"                \"firstname must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"email must be non-empty\",",
									"                    \"firstname must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"email must be non-empty\",",
									"                            \"firstname must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"   ",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": 194, \n  \"member_type\": 2\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" email and firstname information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": 194, \n  \"member_type\": 2\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"email must be non-empty\",\n        \"firstname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"email must be non-empty\",\n        \"firstname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-6 Creating admin leaving email and lastname field empty  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2091c6a2-eff4-4574-94ae-e17ac57c520c",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"email must be non-empty\",",
									"                \"lastname must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"email must be non-empty\",",
									"                    \"lastname must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"email must be non-empty\",",
									"                            \"lastname must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"   ",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"\", \n  \"company_id\": 194, \n  \"member_type\": 2\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" email and lastname information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"\", \n  \"company_id\": 194, \n  \"member_type\": 2\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"email must be non-empty\",\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"email must be non-empty\",\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-7 Creating admin leaving email and company_id field empty  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98099d95-862d-48fd-ab94-690263006d6d",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"email must be non-empty\",",
									"                \"company id must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"email must be non-empty\",",
									"                    \"company id must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"email must be non-empty\",",
									"                            \"company id must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"\", \n  \"member_type\": 2\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" email and company_id information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"\", \n  \"member_type\": 2\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"email must be non-empty\",\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"email must be non-empty\",\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-8 Creating admin leaving email and member_type field empty   ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23500345-46c9-4cdf-b02f-25f6dc333803",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"email must be non-empty\",",
									"                \"member_type must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"email must be non-empty\",",
									"                    \"member_type must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"email must be non-empty\",",
									"                            \"member_type must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" email and member_type information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"email must be non-empty\",\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"email must be non-empty\",\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-9 Creating admin leaving password field empty   ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e0dabe3-6395-4d33-a89e-84682605d464",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"password must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"password must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"password must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" password information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"password must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"password must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-10 Creating admin leaving password and username field empty   ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91f75208-1fac-4d75-ba94-5896ef76c710",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"password must be non-empty\",",
									"                \"username must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"password must be non-empty\",",
									"                    \"username must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"password must be non-empty\",",
									"                            \"username must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"   ",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"\", \n  \"username\": \"\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" password information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"\", \n  \"username\": \"\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"password must be non-empty\",\n        \"username must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"password must be non-empty\",\n        \"username must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-11 Creating admin leaving password and firstname field empty ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b7384d9-d221-4a55-a948-d27f35bf109a",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"password must be non-empty\",",
									"                \"firstname must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"password must be non-empty\",",
									"                    \"firstname must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"password must be non-empty\",",
									"                            \"firstname must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" password information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"\", \n  \"username\": \"Abidur0358\", \n  \"firstname\": \"\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"password must be non-empty\",\n        \"firstname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"password must be non-empty\",\n        \"firstname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-12 Creating admin leaving password and lastname field empty  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a11b4dac-5095-45a4-814e-b67d878aec14",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"password must be non-empty\",",
									"                \"lastname must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"password must be non-empty\",",
									"                    \"lastname must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"password must be non-empty\",",
									"                            \"lastname must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" password information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"\", \n  \"username\": \"Abidur0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"password must be non-empty\",\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"password must be non-empty\",\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-13 Creating admin leaving password and company_id field empty   ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "febb22a3-2c84-4650-991c-0ed2ead8f4b7",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"password must be non-empty\",",
									"                \"company id must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"password must be non-empty\",",
									"                    \"company id must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"password must be non-empty\",",
									"                            \"company id must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"   ",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"\", \n  \"member_type\": \"2\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" password and company_id information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"\", \n  \"username\": \"Abidur0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"\", \n  \"member_type\": \"2\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"password must be non-empty\",\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"password must be non-empty\",\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-14 Creating admin leaving password and member_type field empty   ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d779bdd-99ae-4b82-8276-e0909f9545a5",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"password must be non-empty\",",
									"                \"member_type must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"password must be non-empty\",",
									"                    \"member_type must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"password must be non-empty\",",
									"                            \"member_type must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" password and member_type information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"\", \n  \"username\": \"Abidur0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"password must be non-empty\",\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"password must be non-empty\",\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-15 Creating admin leaving username field empty   ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0933aeab-e562-4da7-89f5-890484dd13bc",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"username must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"username must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"username must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" username information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"username must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"username must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-16 Creating admin leaving username and firstname field empty   ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b575d17-95f3-40ef-af53-53ba5aad82c7",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"username must be non-empty\",",
									"                \"firstname must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"username must be non-empty\",",
									"                    \"firstname must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"username must be non-empty\",",
									"                            \"firstname must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"\", \n  \"firstname\": \"\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" username and firstname information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"\", \n  \"firstname\": \"\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"username must be non-empty\",\n        \"firstname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"username must be non-empty\",\n        \"firstname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-17 Creating admin leaving username and lastname field empty   ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f818bdab-fda2-4895-b8b5-62c8f7b997ce",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"username must be non-empty\",",
									"                \"lastname must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"username must be non-empty\",",
									"                    \"lastname must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"username must be non-empty\",",
									"                            \"lastname must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"   ",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" username and lastname information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"username must be non-empty\",\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"username must be non-empty\",\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-18 Creating admin leaving username and member_type field empty   ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbeff0ec-ed98-45ed-aa55-0e1684d5a994",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"username must be non-empty\",",
									"                \"member_type must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"username must be non-empty\",",
									"                    \"member_type must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"username must be non-empty\",",
									"                            \"member_type must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"   ",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" username and member_type information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"username must be non-empty\",\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"username must be non-empty\",\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-19 Creating admin leaving firstname field empty   ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4aa218b-18c6-4f11-b1d9-14136cf057df",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"firstname must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"firstname must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"firstname must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" firstname information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"firstname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"firstname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-20 Creating admin leaving firstname and lastname field empty   ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d50c58fa-0b30-4b56-8236-030b89a057af",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"firstname must be non-empty\",",
									"                \"lastname must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"firstname must be non-empty\",",
									"                    \"lastname must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"firstname must be non-empty\",",
									"                            \"lastname must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"\", \n  \"lastname\": \"\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" firstname and lastname information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"\", \n  \"lastname\": \"\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"firstname must be non-empty\",\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"firstname must be non-empty\",\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-21 Creating admin leaving firstname and company_id field empty    ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ae6d55f-70e5-43f4-a924-8787fbecf318",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"firstname must be non-empty\",",
									"                \"company id must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"firstname must be non-empty\",",
									"                    \"company id must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"firstname must be non-empty\",",
									"                            \"company id must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"\", \n  \"member_type\": \"2\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" firstname and company_id information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"\", \n  \"member_type\": \"2\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"firstname must be non-empty\",\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"firstname must be non-empty\",\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-22 Creating admin leaving firstname and member_type field empty    ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3ff74e7-029f-4ff1-a4be-54c2638f0087",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"firstname must be non-empty\",",
									"                \"member_type must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"firstname must be non-empty\",",
									"                    \"member_type must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"firstname must be non-empty\",",
									"                            \"member_type must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" firstname and member_type information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"firstname must be non-empty\",\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"firstname must be non-empty\",\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-23 Creating admin leaving lastname empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76e1986a-74a9-4e5e-b267-4853c1d40dde",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"lastname must be non-empty\"",
									"                ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"lastname must be non-empty\"",
									"                    ",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"lastname must be non-empty\"",
									"                           ",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"   ",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"\", \n  \"company_id\": \"194\", \n  \"member_type\": \"2\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" lastname and company_id information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"\", \n  \"company_id\": \"\", \n  \"member_type\": \"2\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"lastname must be non-empty\",\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"lastname must be non-empty\",\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-24 Creating admin leaving lastname and company_id field empty    ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8746d888-95bf-42f3-92d6-efdbc5f72250",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"lastname must be non-empty\",",
									"                \"company id must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"lastname must be non-empty\",",
									"                    \"company id must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"lastname must be non-empty\",",
									"                            \"company id must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"   ",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"\", \n  \"company_id\": \"\", \n  \"member_type\": \"2\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" lastname and company_id information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"\", \n  \"company_id\": \"\", \n  \"member_type\": \"2\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"lastname must be non-empty\",\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"lastname must be non-empty\",\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-25 Creating admin leaving lastname and member_type field empty    ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d741f16-565e-40f9-b102-c9a0c5a87247",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"lastname must be non-empty\",",
									"                \"member_type must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"lastname must be non-empty\",",
									"                    \"member_type must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"lastname must be non-empty\",",
									"                            \"member_type must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"\", \n  \"company_id\": \"194\", \n  \"member_type\": \"\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" lastname and member_type information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"\", \n  \"company_id\": \"194\", \n  \"member_type\": \"\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"lastname must be non-empty\",\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"lastname must be non-empty\",\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-26 Creating admin leaving company_id field empty    ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e365cb83-0b66-436b-bbd3-fe0d099f8602",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"company id must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"company id must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"company id must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"\", \n  \"member_type\": \"2\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" company_id information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"\", \n  \"member_type\": \"2\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-27 Creating admin leaving company_id and member_type empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1c25a1a-efdc-47c0-a7a4-04703cbc3850",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"company id must be non-empty\",",
									"                \"member_type must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"company id must be non-empty\",",
									"                    \"member_type must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"company id must be non-empty\",",
									"                            \"member_type must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"\", \n  \"member_type\": \"\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" company_id information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"\", \n  \"member_type\": \"2\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				},
				{
					"name": "FFME2-18-28 Creating admin leaving member_type field empty    ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c061616-bca0-448d-8f57-bb6a10abed3e",
								"exec": [
									"//Response time validation ",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//Status code validation ",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//create variable for json data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Generating Schema ",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"member_type must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"member_type must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"member_type must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"   ",
									"//Schema Validtation Test",
									"",
									"pm.test('Schema Validation', function() {",
									"   ",
									"    var result=tv4.validateResult(pm.response.json(), schema);",
									" ",
									"    if(!result.valid){",
									"        console.log(result);",
									"    }",
									" ",
									"    pm.expect(result.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"\"\n\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" member_type information. \n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Rahman\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\n\nMethod: POST\n{ \n  \"email\": \"abidurrahman0358@gmail.com\", \n  \"password\": \"Michigan\", \n  \"username\": \"Abid0358\", \n  \"firstname\": \"Abidur\", \n  \"lastname\": \"Rahman\", \n  \"company_id\": \"194\", \n  \"member_type\": \"\"\n  }\n\nExpected Result:\n{\n    \"message\": [\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nActual Result:\n{\n    \"message\": [\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\nStatus Code: 403 FORBIDDEN\nTest Result: Pass\n"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "29410fc3-085f-487c-8403-229ff4cfdf4e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d327624e-2e26-4889-8d9b-e85b79fcb82e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}